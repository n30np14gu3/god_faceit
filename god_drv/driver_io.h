#pragma once
//Init cheat code
#define IO_INIT_CHEAT_DATA				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1000, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_DRIVER_ALIVE     			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1001, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IO_READ_PROCESS_MEMORY_32		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1004, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_WRITE_PROCESS_MEMORY_32		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1005, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)


//CS GO ONLY Methods
#define IO_GET_CLIENT_DLL				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1006, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

typedef struct _KERNEL_INIT_DATA_REQUEST
{
	DWORD64 CsgoId;
	DWORD64 CheatId;
	NTSTATUS Result;
} KERNEL_INIT_DATA_REQUEST, * PKERNEL_INIT_DATA_REQUEST;

typedef struct _KERNEL_READ_REQUEST32
{
	DWORD32 Address;
	DWORD64 Response;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_READ_REQUEST32, * PKERNEL_READ_REQUEST32;

typedef struct _KERNEL_WRITE_REQUEST32
{
	DWORD32 Address;
	DWORD64 Value;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_WRITE_REQUEST32, * PKERNEL_WRITE_REQUEST32;

typedef struct _KERNEL_GET_CLIENT_DLL
{
	DWORD32 bClient;
	NTSTATUS result;
} KERNEL_GET_CLIENT_DLL, * PKERNEL_GET_CLIENT_DLL;


typedef struct _DRIVER_ALIVE_REQUEST
{
	NTSTATUS status;
} DRIVER_ALIVE_REQUEST, * PDRIVER_ALIVE_REQUEST;
